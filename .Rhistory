german_credit <- read.csv("F:/IDM Downloads/german_credit.csv")
View(german_credit)
Boruta(Creditability~.,data=train,maxRuns = 100,doTrace = 0)
library(Boruta)
Boruta(Creditability~.,data=train,maxRuns = 100,doTrace = 0)
samp_size<-0.8*nrow(german_credit)
train_index<-sample(seq_len(nrow(german_credit)), size = samp_size)
train<-german_credit[train_index,]
test<-german_credit[-train_index,]
library(Boruta)
Boruta(Creditability~.,data=train,maxRuns = 100,doTrace = 0)
train_Boruta<-Boruta(Creditability~.,data=train,maxRuns = 100,doTrace = 0)
getSelectedAttributes(train_Boruta,withTentative = FALSE)
train_Boruta<-Boruta(Creditability~.,data=german_credit,maxRuns = 150,doTrace = 0)
german_attr<-getSelectedAttributes(train_Boruta)
german_attr<-getSelectedAttributes(train_Boruta,withTentative = FALSE)
print(german_attr)
train_Boruta<-Boruta(Creditability~.,data=german_credit,maxRuns = 200,doTrace = 0)
german_attr2<-getSelectedAttributes(train_Boruta,withTentative = FALSE)
print(german_attr2)
train_Boruta<-Boruta(Creditability~.,data=german_credit,maxRuns = 300,doTrace = 0)
german_attr3<-getSelectedAttributes(train_Boruta,withTentative = FALSE)
print(german_attr3)
train<-train[,c(1:8,11,13:16)]
test<-test[,c(1:8,11,13:16)]
View(train)
train_log_regr<-glm(Creditability~.,data=train,family = binomial())
predict(train_log_regr,type = "response")
prediction_log_regr<-predict(train_log_regr,type = "response")
train$prediction_log_regr<-predict(train_log_regr,type = "response")
View(train)
train$prediction_log_regr<-ifelse(train$prediction_log_regr>=0.5,1,0)
View(train)
library("e1071", lib.loc="~/R/win-library/3.3")
library("rpart", lib.loc="~/R/win-library/3.3")
test$prediction_log_regr<-predict(train_log_regr,type = "response")
install.packages(rminer)
install.packages("rminer")
install.packages("rminer")
library(rminer)
fit(Creditability~.,data=train,model="ksvm")
s<-list(search=mparheuristic("ksvm",10))
m<-fit(Creditability~.,data=train,model="ksvm",search = s,fdebug = TRUE)
prin(m@mpar)
print(m@mpar)
p<-predict.fit(m,test)
p<-predict(m,test)
train$prediction_log_regr
train$prediction_log_regr<-NULL
m<-fit(Creditability~.,data=train,model="ksvm",search = s,fdebug = TRUE)
p<-predict(m,test)
test$svm<-p
View(test)
rm(m,p,s)
library(kernlab)
set.seed(1492)
library("caret", lib.loc="~/R/win-library/3.3")
library("dplyr", lib.loc="~/R/win-library/3.3")
install.packages("proc")
install.packages("pROC")
library(pROC)
ctrl<-trainControl(method="repeatedcv",repeats = 5,summaryFunction = twoClassSummary,classProbs = TRUE)
svm.train<-train(x=train[,2:12],y=train$Creditability,method="svmRadial",tuneLength=9,preProc=c("center","scale"),metric="ROC",trControl=ctrl)
svm.train<-train.default(x=train[,2:12],y=train$Creditability,method="svmRadial",tuneLength=9,preProc=c("center","scale"),metric="ROC",trControl=ctrl)
ctrl<-trainControl(method="repeatedcv",repeats = 5,summaryFunction = twoClassSummary,classProbs = FALSE)
svm.train<-train.default(x=train[,2:12],y=train$Creditability,method="svmRadial",tuneLength=9,preProc=c("center","scale"),metric="ROC",trControl=ctrl)
ctrl<-trainControl(method="repeatedcv",repeats = 5,summaryFunction = twoClassSummary,classProbs = TRUE)
svm.train<-train.default(x=train[,2:12],y=train$Creditability,method="svmRadial",tuneLength=9,preProc=c("center","scale"),metric="ROC",trainControl=ctrl)
svm.train<-train.default(x=train[,2:12],y=train$Creditability,method="svmRadial",tuneLength=9,preProc=c("center","scale"),metric="ROC",ctrl=trControl)
ctrl<-trainControl(method="repeatedcv",repeats = 5,summaryFunction = twoClassSummary,classProbs = TRUE)
svm.train<-train(x=train[,2:12],y=as.factor(train$Creditability),method="svmRadial",tuneLength=9,preProc=c("center","scale"),metric="ROC",trControl=ctrl)
svm.train<-train(x=train[,2:13],y=train$Creditability,method="svmRadial",tuneLength=9,preProc=c("center","scale"),metric="ROC",trControl=ctrl)
svm.train<-train(Creditability~.,data=train,method="svmRadial",tuneLength=9,preProc=c("center","scale"),metric="ROC",trControl=ctrl)
svm.train<-train(Creditability~.,data=train,method="svmRadial",tuneLength=9,preProc=c("center","scale"),trControl=ctrl)
svm.train<-train(Creditability~.,data=as.factor(train),method="svmRadial",tuneLength=9,preProc=c("center","scale"),trControl=ctrl)
svm.train<-train(Creditability~.,data=train,method="svmRadial",tuneLength=9,preProc=c("center","scale"),trControl=ctrl)
library(kernlab)
library(e1071)
creditability<-factor(train$Creditability)
train_svm<-svm(Creditabilty~.,data=train,kernel="sigmoid",type="C-classification",probability=TRUE)
train_svm<-svm(Creditability~.,data=train,kernel="sigmoid",type="C-classification",probability=TRUE)
train_svm
x<-subset(train,select = -Creditability)
pred<-predict(train_svm,x)
train_svm_t<-table(pred,y)
train_svm_t<-table(pred,creditability)
View(train_svm_t)
train_svm2<-svm(Creditability~.,data=train,kernel="radial basis",type="C-classification",probability=TRUE)
x<-subset(train,select = -Creditability)
pred<-predict(train_svm,x)
train_svm_t2<-table(pred,creditability)
train_svm2<-svm(Creditability~.,data=train,kernel="exp(-gamma*|u-v|^2)",type="C-classification",probability=TRUE)
x<-subset(train,select = -Creditability)
pred<-predict(train_svm,x)
train_svm_t2<-table(pred,creditability)
train_svm2<-svm(Creditability~.,data=train,type="C-classification",probability=TRUE)
x<-subset(train,select = -Creditability)
pred<-predict(train_svm,x)
train_svm_t2<-table(pred,creditability)
train_svm
rm(train_svm_t2,train_svm2)
train_svm2<-svm(Creditability~.,data=train,kernel="radial",type="C-classification",probability=TRUE)
x<-subset(train,select = -Creditability)
pred<-predict(train_svm,x)
train_svm_t2<-table(pred,creditability)
rm(train_svm_t2,train_svm2)
library(neuralnet)
train_net<-neuralnet(Creditability~.,data=train,hidden = 4,algorithm = 'backprop',linear.output = FALSE)
train_net<-neuralnet(Creditability~Account.Balance+Duration.of.Credit..month.,data=train,hidden = 4,algorithm = 'backprop',linear.output = FALSE)
train_net<-neuralnet(Creditability~Account.Balance+Duration.of.Credit..month.,data=train,hidden = 4,algorithm = 'backprop',linear.output = FALSE,learningrate = 10)
train_net2<-neuralnet(Creditability~train[,c(2,13)],data=train,hidden = 4,algorithm = 'backprop',linear.output = FALSE,learningrate = 100)
train_net2<-neuralnet(Creditability~train$Account.Balance+train$Duration.of.Credit..month.+train$Payment.Status.of.Previous.Credit+train$Purpose+train$Credit.Amount+train$Type.of.apartment+train$Concurrent.Credits+train$Age..years.+train$Most.valuable.available.asset+train$Guarantors+train$Length.of.current.employment+train$Value.Savings.Stocks,data=train,hidden = 4,algorithm = 'backprop',linear.output = FALSE,learningrate = 100)
rm(train_net)
train_net2<-neuralnet(Creditability~train$Account.Balance+train$Duration.of.Credit..month.+train$Payment.Status.of.Previous.Credit+train$Purpose+train$Credit.Amount+train$Type.of.apartment+train$Concurrent.Credits+train$Age..years.+train$Most.valuable.available.asset+train$Guarantors+train$Length.of.current.employment+train$Value.Savings.Stocks,data=train,hidden = 4,algorithm = 'backprop',linear.output = FALSE,learningrate = 100,threshold = 0.1)
View(test)
test$svm<-NULL
test1<-subset(test,select = -c("Creditability"))
test1<-subset(test,select = -c(Creditability))
View(test1)
tesst1_net<-compute(train_net2,test1)
results<-data.frame(actual=test$Creditability,predicted=tesst1_net$net.result)
View(results)
results_train_net<-data.frame(actual=train$Creditability,predicted=train_net2$net.result)
View(results_train_net)
plot(train_net2,rep = "best")
train_table_net<-table(train$Creditability,train_net2$net.result)
train_table_net<-table(test$Creditability,tesst1_net$net.result)
rm(train_table_net)
test_table_net<-table(test$Creditability,tesst1_net$net.result)
View(test_table_net)
train_table_net<-table(train$Creditability,train_net2$net.result)
train_net2<-neuralnet(Creditability~train$Account.Balance+train$Duration.of.Credit..month.+train$Payment.Status.of.Previous.Credit+train$Purpose+train$Credit.Amount+train$Type.of.apartment+train$Concurrent.Credits+train$Age..years.+train$Most.valuable.available.asset+train$Guarantors+train$Length.of.current.employment+train$Value.Savings.Stocks,data=train,hidden = 10,algorithm = 'backprop',linear.output = FALSE,learningrate = 100,threshold = 0.1)
tesst1_net<-compute(train_net2,test1)
results<-data.frame(actual=test$Creditability,predicted=tesst1_net$net.result)
View(results)
library(e1071)
hist(creditability,col="tomato")
skewness(creditability)
View(creditability)
creditability<-german_credit$Creditability
hist(creditability,col="tomato")
skewness(creditability)
skew.score <- function(c, x) (skewness(log(x + c)))^2
cval <- seq(0, 20, l = 101)
skew <- cval * 0
for (i in 1:length(cval)) skew[i] <- skewness(log(cval[i] + ozone))
plot(cval, skew, type = "l", ylab = expression(b[3](c)), xlab = expression(c))
abline(h = 0, lty = 3)
cval <- seq(0, 20, l = 101)
skew <- cval * 0
for (i in 1:length(cval)) skew[i] <- skewness(log(cval[i] + creditability))
plot(cval, skew, type = "l", ylab = expression(b[3](c)), xlab = expression(c))
abline(h = 0, lty = 3)
best.c <- optimise(skew.score, c(0, 20), x = creditability)$minimum
best.c
creditability.transformed <- log(creditability + best.c)
hist(creditability.transformed, col = "azure")
skewness(creditability.transformed)
